package templates

import "text/template"

var MainTemplate = template.Must(template.New("server.go").Parse(`
// This file was generated by robots at {{ .Timestamp }}
// Feel free to be a part of this project: github.com/hyperxpizza/crud-generator

package main

import (
	"log"
	"os"

	"github.com/gin-gonic/gin"
	"{{ .Module }}/database"
	"{{ .Module }}/handlers"
	"github.com/joho/godotenv"
)

func main() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Fataf("loading .env file failed: %v\n", err)
	}

	user := os.Getenv("POSTGRES_USER")
	password := os.Getenv("POSTGRES_PASSWORD")
	dbname := os.Getenv("POSTGRES_NAME")
	host := os.Getenv("POSTGRES_HOST")
	port := os.Getenv("POSTGRES_PORT")

	err = database.InitDB(user, password, dbname, host, port)
	if err != nil {
		log.Fatalf("database.InitDB failed: %v\n", err)
	}

	router := gin.Default()
	router.Use(corsMiddleware())

	{{- range .Objects }}

		router.POST("/{{ .Object }}", handlers.Create{{ .Object }})
		router.PUT("{{ .Object }}/:id", handlers.Update{{ .Object }})
		router.GET("/{{ .Object }}", handler.GetAll{{ .Model }}s)
		router.GET("/{{ .Object }}/:id", handlers.Get{{ .Object }})
		router.DELETE("/{{ .Object }}/:id", handlers.Delete{{ .Object }})
	
	{{- end }}

	router.Run(":"+ os.Getenv("SERVER_PORT"))
}


func corsMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	}
}
`))
